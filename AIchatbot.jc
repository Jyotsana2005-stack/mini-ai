Here's a basic AI chatbot code in various programming language:


Python

import nltk
from nltk.stem.lancaster import LancasterStemmer
stemmer = LancasterStemmer()

import numpy as np
import tflearn
import tensorflow as tf
import random
import json

with open("intents.json") as file:
    data = json.load(file)

words = []
labels = []
docs_x = []
docs_y = []

for intent in data["intents"]:
    for pattern in intent["patterns"]:
        wrds = nltk.word_tokenize(pattern)
        words.extend(wrds)
        docs_x.append(wrds)
        docs_y.append(intent["tag"])

        if intent["tag"] not in labels:
            labels.append(intent["tag"])

words = [stemmer.stem(w.lower()) for w in words if w != "?"]
words = sorted(list(set(words)))

labels = sorted(labels)

training = []
output = []

out_empty = [0 for _ in range(len(labels))]

for x, doc in enumerate(docs_x):
    bag = []

    wrds = [stemmer.stem(w.lower()) for w in doc]

    for w in words:
        if w in wrds:
            bag.append(1)
        else:
            bag.append(0)

    output_row = out_empty[:]
    output_row[labels.index(docs_y[x])] = 1

    training.append(bag)
    output.append(output_row)

training = np.array(training)
output = np.array(output)

tf.reset_default_graph()

net = tflearn.input_data(shape=[None, len(training[0])])
net = tflearn.fully_connected(net, 8)
net = tflearn.fully_connected(net, 8)
net = tflearn.fully_connected(net, len(output[0]), activation="softmax")
net = tflearn.regression(net)

model = tflearn.DNN(net)

model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)
model.save("model.tflearn")

def bag_of_words(s, words):
    bag = [0 for _ in range(len(words))]

    s_words = nltk.word_tokenize(s)
    s_words = [stemmer.stem(word.lower()) for word in s_words]

    for se in s_words:
        for i, w in enumerate(words):
            if w == se:
                bag[i] = 1
            
    return np.array(bag)

def chat():
    print("Start talking with the bot (type quit to stop)!")
    while True:
        inp = input("You: ")
        if inp.lower() == "quit":
            break

        results = model.predict([bag_of_words(inp, words)])
        results_index = np.argmax(results)
        tag = labels[results_index]

        for tg in data["intents"]:
            if tg['tag'] == tag:
                responses = tg['responses']

        print(random.choice(responses))

chat()


JavaScript

const brain = require('brain.js');
const _ = require('lodash');
const natural = require('natural');

const network = new brain.recurrent.LSTM();

const trainingData = [
  { input: 'hello', output: 'hi' },
  { input: 'how are you', output: 'good' },
];

network.train(trainingData, {
  iterations: 1000,
  errorThresh: 0.005,
});

const tokenizer = new natural.WordTokenizer();
const stemmer = natural.PorterStemmer;

function tokenize(input) {
  return tokenizer.tokenize(input);
}

function stem(words) {
  return _.map(words, stemmer.stem);
}

function bagOfWords(input) {
  const words = tokenize(input);
  const stemmed = stem(words);
  const bag = {};

  _.each(stemmed, (word) => {
    bag[word] = (bag[word] || 0) + 1;
  });

  return bag;
}

function chat() {
  console.log('Start talking with the bot (type quit to stop)!');

  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.setPrompt('You: ');

  rl.prompt();

  rl.on('line', (input) => {
    if (input.toLowerCase() === 'quit') {
      rl.close();
    }

    const result = network.run(bagOfWords(input));
    console.log(`Bot: ${result}`);

    rl.prompt();
  });
}

chat();



Java

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.Multi
